name: Run Splice Analysis
on:
  workflow_dispatch: 
    inputs:
      splice:
        description: 'Name of YAML splice config in splices (e.g., splices/curl.yaml)'
        required: true

jobs:
  prepare:
    runs-on: ubuntu-latest
    permissions:
      packages: read
    outputs:
      containers: ${{ steps.generate.outputs.matrix }}

    name: Generate Spliced Matrix
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Spliced
        uses: buildsi/spliced/action/install@main
      - name: Generate Matrix
        uses: buildsi/spliced/action/matrix@main
        with:
          yaml: ${{ github.event.inputs.splice }}
          container: ghcr.io/buildsi/spliced-ubuntu-20.04:latest            

  run-splices:
    runs-on: ubuntu-latest
    needs:
      - prepare
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        # Each entry has a command, and all the variables provided individually
        # {
        #   "command": "spliced splice --package curl@7.52.1 --splice zlib --runner spack --replace zlib --experiment curl curl --head https://linuxize.com/",
        #   "package": "curl@7.52.1",
        #   "runner": "spack",
        #   "splice": "zlib",
        #   "replace": "zlib",
        #   "experiment": "curl",
        #   "container": "ghcr.io..."
        # },
        entry: ${{ fromJson(needs.prepare.outputs.matrix) }}
        arch: ['linux/amd64']

    # Run tests inside the container above - we could also build with Dockerfile if desired
    container:
      image: ${{ matrix.entry.container }}
      options: "--platform=${{ matrix.arch }}"

    name: ${{ matrix.entry.package }} ${{ matrix.entry.replace }} -> ${{ matrix.entry.splice }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set Result Name
        env:
          splice_id: pkg-${{ matrix.entry.package }}-splice-${{ matrix.entry.splice }}-with-${{ matrix.entry.splice }}-experiment-${{ matrix.entry.experiment }}
        run: echo "splice_id=${splice_id}" >> $GITHUB_ENV

      - name: Run analysis
        env:
          SPACK_ADD_DEBUG_FLAGS: true
          command: ${{ matrix.entry.command }}
        run: |
          apt-get update && apt-get install -y vim libtool
          cd /opt/spack && git fetch && git checkout vsoch/db-17-splice && cd -
          printf "${command} --outfile ${{ env.splice_id }}-splices.json\n"
          ${command} --outfile ${{ env.splice_id }}-splices.json

      - name: Save Result Artifact
        uses: actions/upload-artifact@v2
        with:
          name: "test-results-${{ env.splice_id }}"
          path: ./${{ env.splice_id }}-splices.json
